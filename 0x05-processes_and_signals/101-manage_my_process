#!/usr/bin/env bash
# This script manages another script named manage_my_process.
#   When it is passed the argument `start`:
#     1. It initiates manage_my_process
#     2. Creates a new file containings its PID in /var/run/my_process.pid
#     3. Prints "manage_my_process started"
#   When it is passed the argument `stop`:
#     1. It ends manage_my_process
#     2. It removes the file /var/run/my_process.pid
#     3. And prints "manage_my_process stopped"
#   When it is passed the argument `restart`:
#     1. It ends manage_my_process
#     2. It removes the file /var/run/my_process.pid
#     3. It initialize manage_my_process
#     4. Creates a new file containing its PID in /var/run/my_process.pid
#     5. And prints "manage_my_process restarted"
#   If no other arguments are passed, it git statdisplays
#+  "Usage: manage_my_process {start|stop|restart}"

if [ $# -gt 0 ]
then
    if [ "$1" == "start" ]
    then
	./manage_my_process &
	touch /var/run/my_process.pid
#	echo $(pgrep -f manage_my_process) > /var/run/my_process.pid
	echo "$!" > /var/run/my_process.pid
	echo "manage_my_process started"
    elif [ "$1" == "stop" ]
    then
#	kill $(pgrep -f manage_my_process)
	echo "manage_my_process stopped"
	kill "$(cat /var/run/my_process.pid)"
	rm -f /var/run/my_process.pid
    elif [ "$1" == "restart" ]
    then
#	kill $(pgrep -f manage_my_process)
	kill "$(cat /var/run/my_process.pid)"
	rm -f /var/run/my_process.pid
	./manage_my_process &
#	echo $(pgrep -f manage_my_process) > /var/run/my_process.pid
	touch /var/run/my_process.pid
	echo "$!" > /var/run/my_process.pid
	echo "manage_my_process restarted"
    else
	echo "Usage: manage_my_process {start|stop|restart}"
    fi
else
    echo "Usage: manage_my_process {start|stop|restart}"
fi
